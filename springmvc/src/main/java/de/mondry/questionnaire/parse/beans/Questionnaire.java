//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.4 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2014.03.18 at 02:55:53 PM CET 
//

package de.mondry.questionnaire.parse.beans;

import java.util.ArrayList;
import java.util.List;

import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlRootElement;
import javax.xml.bind.annotation.XmlType;

/**
 * <p>
 * Java class for questionnaire complex type.
 * 
 * <p>
 * The following schema fragment specifies the expected content contained within this class.
 * 
 * <pre>
 * &lt;complexType name="questionnaire">
 *   &lt;complexContent>
 *     &lt;restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *       &lt;sequence>
 *         &lt;element name="question" type="{http://de.mondry/questionnaire/beans}question" maxOccurs="unbounded" minOccurs="0"/>
 *       &lt;/sequence>
 *     &lt;/restriction>
 *   &lt;/complexContent>
 * &lt;/complexType>
 * </pre>
 * 
 * 
 */
@XmlRootElement
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "questionnaire", propOrder = { "question" })
public class Questionnaire {
    
    @Override
    public String toString() {
        return "Questionnaire [question=" + question + "]";
    }
    
    protected List<Question> question;
    
    /**
     * Gets the value of the question property.
     * 
     * <p>
     * This accessor method returns a reference to the live list, not a snapshot. Therefore any modification you make to the returned list will be present
     * inside the JAXB object. This is why there is not a <CODE>set</CODE> method for the question property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * 
     * <pre>
     * getQuestion().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list {@link Question }
     * 
     * 
     */
    public List<Question> getQuestion() {
        if (question == null) {
            question = new ArrayList<Question>();
        }
        return this.question;
    }
    
    /**
     * Convenient method for returning all questions in one big list.
     * 
     * @return List<Question> all questions of this object.
     */
    public List<Question> gatherAllQuestions() {
        List<Question> questions = this.question;
        return gatherAllQuestions(questions);
    }
    
    /**
     * Iterate over all questions and gather all subquestion into one big list.
     * 
     * @return
     */
    private List<Question> gatherAllQuestions(List<Question> questions) {
        List<Question> allQuestions = new ArrayList<>();
        
        for (Question question : questions) {
            
            allQuestions.add(question);
            List<Answer> answers = question.getAnswerlist().getAnswer();
            for (Answer answer : answers) {
                if (answer.getQuestion().size() > 0) {
                    allQuestions.addAll(gatherAllQuestions(answer.getQuestion()));
                }
            }
        }
        return allQuestions;
    }
    
    public boolean findAnswerByIdAndAnswerString(String id, String answerString) {
        List<Question> allQuestions = gatherAllQuestions();
        for (Question question : allQuestions) {
            if (id.equals(question.id)) {
                List<Answer> answers = question.getAnswerlist().getAnswer();
                for (Answer answer : answers) {
                    if (answerString.equals(answer.answerString)) {
                        return answer.checked;
                    }
                }
            }
        }
        throw new IllegalArgumentException("No matching answer found. Should not happen.");
    }
    
}
